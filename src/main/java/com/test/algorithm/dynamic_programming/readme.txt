

动态规划（dynamic programming）与分治方法相似，都是通过组合子问题的解来求解原问题
（在这里，“programming”指的是一种表格法，并非编写计算机程序）。
分治方法将问题划分为互不相交的子问题，递归地求解子问题，再将它们的解组合起来，求出原问题的解。
与之相反，动态规划应用于子问题重叠的情况，即不同的子问题具有公共的子子问题（子问题的求解是递归进行的，
将其划分为更小的子子问题）。在这种情况下，分治算法会做许多不必要的工作，它会反复求解那些公共子子问题。
而动态规划算法对每个子子问题只求解一次，将其解保存在一个表格中，从而无需每次求解一个子子问题时都重新计算。

动态规划通常用来求解最优化问题（optimization problem）。
这类问题可以有很多可行解，每个解都有一个值，我们希望寻找具有最优值的解。

通常按如下4个步骤来设计一个动态规划算法：
1. 刻画一个最优解的结构特征
2. 递归地定义最优解的值
3. 计算最优解的值，通常采用自底向上的方法
4. 利用计算出的信息构造一个最优解
步骤1-3是动态规划算法求解问题的基础。如果我们仅仅需要一个最优解的值，而非解本身，可以忽略步骤4.

动态规划原理
最优子结构和重叠子问题

最优子结构
如果一个问题的最优解包含其子问题的最优解，就称此问题具有最优子结构性质
1. 证明问题最优解的第一个组成部分是做出一个选择，做出这次选择会产生一个或多个待解的子问题
2. 对于一个给定问题，在其可能的第一步选择中，假定已经知道哪种选择才会得到最优解
3. 给定可获得最优解的选择后，确定这次选择会产生哪些子问题，以及如何最好地刻画子问题空间
4. 利用“剪切-粘贴”（cut-and-paste）技术证明：作为构成原问题最优解的组成部分，每个子问题的解就是它本身的最优解


重叠子问题（overlapping subproblems）
一般来说，不同子问题的总数是输入规模的多项式函数为好
如果递归算法反复求解相同的子问题，就称最优化问题具有重叠子问题性质



